import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./calendar-scheduler-event-actions.component";
import * as i3 from "./pipes/scheduler-event-title.pipe";
export class CalendarSchedulerEventTitleComponent {
    view;
    event;
    showStatus = true;
    showContent = true;
    showActions = true;
    customTemplate;
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.7", ngImport: i0, type: CalendarSchedulerEventTitleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.7", type: CalendarSchedulerEventTitleComponent, selector: "calendar-scheduler-event-title", inputs: { view: "view", event: "event", showStatus: "showStatus", showContent: "showContent", showActions: "showActions", customTemplate: "customTemplate" }, host: { classAttribute: "cal-scheduler-event-title-container" }, ngImport: i0, template: `
        <ng-template #defaultTemplate>
            <div
                class="cal-scheduler-event-title"
                [innerHTML]="event.title | schedulerEventTitle:view:event">
            </div>
            <calendar-scheduler-event-actions
                *ngIf="showActions && !showContent && (event.isClickable || event.isDisabled)"
                class="no-content-actions"
                [event]="event">
            </calendar-scheduler-event-actions>
            <div *ngIf="event.status && showStatus"
                class="cal-scheduler-event-status"
                [class.ok]="event.status === 'ok'"
                [class.warning]="event.status === 'warning'"
                [class.danger]="event.status === 'danger'">
            </div>
        </ng-template>
        <ng-template
            [ngTemplateOutlet]="customTemplate || defaultTemplate"
            [ngTemplateOutletContext]="{
                view: view,
                event: event,
                showStatus: showStatus,
                showContent: showContent,
                showActions: showActions
            }">
        </ng-template>
    `, isInline: true, dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: i2.CalendarSchedulerEventActionsComponent, selector: "calendar-scheduler-event-actions", inputs: ["event"] }, { kind: "pipe", type: i3.SchedulerEventTitlePipe, name: "schedulerEventTitle" }] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.7", ngImport: i0, type: CalendarSchedulerEventTitleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'calendar-scheduler-event-title',
                    template: `
        <ng-template #defaultTemplate>
            <div
                class="cal-scheduler-event-title"
                [innerHTML]="event.title | schedulerEventTitle:view:event">
            </div>
            <calendar-scheduler-event-actions
                *ngIf="showActions && !showContent && (event.isClickable || event.isDisabled)"
                class="no-content-actions"
                [event]="event">
            </calendar-scheduler-event-actions>
            <div *ngIf="event.status && showStatus"
                class="cal-scheduler-event-status"
                [class.ok]="event.status === 'ok'"
                [class.warning]="event.status === 'warning'"
                [class.danger]="event.status === 'danger'">
            </div>
        </ng-template>
        <ng-template
            [ngTemplateOutlet]="customTemplate || defaultTemplate"
            [ngTemplateOutletContext]="{
                view: view,
                event: event,
                showStatus: showStatus,
                showContent: showContent,
                showActions: showActions
            }">
        </ng-template>
    `,
                    host: {
                        'class': 'cal-scheduler-event-title-container'
                    }
                }]
        }], propDecorators: { view: [{
                type: Input
            }], event: [{
                type: Input
            }], showStatus: [{
                type: Input
            }], showContent: [{
                type: Input
            }], showActions: [{
                type: Input
            }], customTemplate: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItc2NoZWR1bGVyLWV2ZW50LXRpdGxlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9tb2R1bGVzL3NjaGVkdWxlci9jYWxlbmRhci1zY2hlZHVsZXItZXZlbnQtdGl0bGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFlLE1BQU0sZUFBZSxDQUFDOzs7OztBQXdDOUQsTUFBTSxPQUFPLG9DQUFvQztJQUVwQyxJQUFJLENBQVM7SUFFYixLQUFLLENBQXlCO0lBRTlCLFVBQVUsR0FBWSxJQUFJLENBQUM7SUFFM0IsV0FBVyxHQUFZLElBQUksQ0FBQztJQUU1QixXQUFXLEdBQVksSUFBSSxDQUFDO0lBRTVCLGNBQWMsQ0FBbUI7dUdBWmpDLG9DQUFvQzsyRkFBcEMsb0NBQW9DLHFTQWpDbkM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0E0QlQ7OzJGQUtRLG9DQUFvQztrQkFuQ2hELFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGdDQUFnQztvQkFDMUMsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBNEJUO29CQUNELElBQUksRUFBRTt3QkFDRixPQUFPLEVBQUUscUNBQXFDO3FCQUNqRDtpQkFDSjs4QkFHWSxJQUFJO3NCQUFaLEtBQUs7Z0JBRUcsS0FBSztzQkFBYixLQUFLO2dCQUVHLFVBQVU7c0JBQWxCLEtBQUs7Z0JBRUcsV0FBVztzQkFBbkIsS0FBSztnQkFFRyxXQUFXO3NCQUFuQixLQUFLO2dCQUVHLGNBQWM7c0JBQXRCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1xyXG4gICAgQ2FsZW5kYXJTY2hlZHVsZXJFdmVudFxyXG59IGZyb20gJy4vbW9kZWxzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdjYWxlbmRhci1zY2hlZHVsZXItZXZlbnQtdGl0bGUnLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgICAgICA8bmctdGVtcGxhdGUgI2RlZmF1bHRUZW1wbGF0ZT5cclxuICAgICAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJjYWwtc2NoZWR1bGVyLWV2ZW50LXRpdGxlXCJcclxuICAgICAgICAgICAgICAgIFtpbm5lckhUTUxdPVwiZXZlbnQudGl0bGUgfCBzY2hlZHVsZXJFdmVudFRpdGxlOnZpZXc6ZXZlbnRcIj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxjYWxlbmRhci1zY2hlZHVsZXItZXZlbnQtYWN0aW9uc1xyXG4gICAgICAgICAgICAgICAgKm5nSWY9XCJzaG93QWN0aW9ucyAmJiAhc2hvd0NvbnRlbnQgJiYgKGV2ZW50LmlzQ2xpY2thYmxlIHx8IGV2ZW50LmlzRGlzYWJsZWQpXCJcclxuICAgICAgICAgICAgICAgIGNsYXNzPVwibm8tY29udGVudC1hY3Rpb25zXCJcclxuICAgICAgICAgICAgICAgIFtldmVudF09XCJldmVudFwiPlxyXG4gICAgICAgICAgICA8L2NhbGVuZGFyLXNjaGVkdWxlci1ldmVudC1hY3Rpb25zPlxyXG4gICAgICAgICAgICA8ZGl2ICpuZ0lmPVwiZXZlbnQuc3RhdHVzICYmIHNob3dTdGF0dXNcIlxyXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJjYWwtc2NoZWR1bGVyLWV2ZW50LXN0YXR1c1wiXHJcbiAgICAgICAgICAgICAgICBbY2xhc3Mub2tdPVwiZXZlbnQuc3RhdHVzID09PSAnb2snXCJcclxuICAgICAgICAgICAgICAgIFtjbGFzcy53YXJuaW5nXT1cImV2ZW50LnN0YXR1cyA9PT0gJ3dhcm5pbmcnXCJcclxuICAgICAgICAgICAgICAgIFtjbGFzcy5kYW5nZXJdPVwiZXZlbnQuc3RhdHVzID09PSAnZGFuZ2VyJ1wiPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L25nLXRlbXBsYXRlPlxyXG4gICAgICAgIDxuZy10ZW1wbGF0ZVxyXG4gICAgICAgICAgICBbbmdUZW1wbGF0ZU91dGxldF09XCJjdXN0b21UZW1wbGF0ZSB8fCBkZWZhdWx0VGVtcGxhdGVcIlxyXG4gICAgICAgICAgICBbbmdUZW1wbGF0ZU91dGxldENvbnRleHRdPVwie1xyXG4gICAgICAgICAgICAgICAgdmlldzogdmlldyxcclxuICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcclxuICAgICAgICAgICAgICAgIHNob3dTdGF0dXM6IHNob3dTdGF0dXMsXHJcbiAgICAgICAgICAgICAgICBzaG93Q29udGVudDogc2hvd0NvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICBzaG93QWN0aW9uczogc2hvd0FjdGlvbnNcclxuICAgICAgICAgICAgfVwiPlxyXG4gICAgICAgIDwvbmctdGVtcGxhdGU+XHJcbiAgICBgLFxyXG4gICAgaG9zdDoge1xyXG4gICAgICAgICdjbGFzcyc6ICdjYWwtc2NoZWR1bGVyLWV2ZW50LXRpdGxlLWNvbnRhaW5lcidcclxuICAgIH1cclxufSlcclxuZXhwb3J0IGNsYXNzIENhbGVuZGFyU2NoZWR1bGVyRXZlbnRUaXRsZUNvbXBvbmVudCB7XHJcblxyXG4gICAgQElucHV0KCkgdmlldzogc3RyaW5nO1xyXG5cclxuICAgIEBJbnB1dCgpIGV2ZW50OiBDYWxlbmRhclNjaGVkdWxlckV2ZW50O1xyXG5cclxuICAgIEBJbnB1dCgpIHNob3dTdGF0dXM6IGJvb2xlYW4gPSB0cnVlO1xyXG5cclxuICAgIEBJbnB1dCgpIHNob3dDb250ZW50OiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgICBASW5wdXQoKSBzaG93QWN0aW9uczogYm9vbGVhbiA9IHRydWU7XHJcblxyXG4gICAgQElucHV0KCkgY3VzdG9tVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XHJcbn1cclxuIl19