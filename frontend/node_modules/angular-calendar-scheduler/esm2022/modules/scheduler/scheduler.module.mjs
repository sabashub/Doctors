import { NgModule, InjectionToken } from '@angular/core';
import { CommonModule } from '@angular/common';
import { adapterFactory } from 'angular-calendar/date-adapters/date-fns';
import { CalendarModule, DateAdapter } from 'angular-calendar';
import { CalendarSchedulerViewComponent } from './calendar-scheduler-view.component';
import { CalendarSchedulerHourSegmentComponent } from './calendar-scheduler-hour-segment.component';
import { CalendarSchedulerHeaderComponent } from './calendar-scheduler-header.component';
import { CalendarSchedulerEventComponent } from './calendar-scheduler-event.component';
import { CalendarSchedulerEventTitleComponent } from './calendar-scheduler-event-title.component';
import { CalendarSchedulerEventContentComponent } from './calendar-scheduler-event-content.component';
import { CalendarSchedulerEventActionsComponent } from './calendar-scheduler-event-actions.component';
import { CalendarSchedulerUtils } from './utils/calendar-scheduler-utils.provider';
import { SchedulerEventTitlePipe } from './pipes/scheduler-event-title.pipe';
import { CalendarSchedulerDatePipe } from './pipes/calendar-scheduler-date.pipe';
import { SchedulerDateFormatter } from './formatters/scheduler-date-formatter.provider';
import { SchedulerEventTitleFormatter } from './formatters/scheduler-event-title-formatter.provider';
import { SchedulerConfig } from './scheduler-config';
import * as i0 from "@angular/core";
import * as i1 from "angular-calendar";
export * from './calendar-scheduler-view.component';
export * from './formatters/scheduler-date-formatter.provider';
export * from './formatters/scheduler-event-title-formatter.provider';
export * from './pipes/scheduler-event-title.pipe';
export * from './pipes/calendar-scheduler-date.pipe';
export * from './utils/calendar-scheduler-utils';
export * from './utils/calendar-scheduler-utils.provider';
export * from '../common/utils';
export * from './models';
export * from './calendar-scheduler-hour-segment.component';
export * from './calendar-scheduler-header.component';
export * from './calendar-scheduler-event.component';
export * from './calendar-scheduler-event-title.component';
export * from './calendar-scheduler-event-content.component';
export * from './calendar-scheduler-event-actions.component';
export const SCHEDULER_CONFIG = new InjectionToken('SchedulerConfig');
export function provideSchedulerConfig(config) {
    return new SchedulerConfig(config);
}
/**
 * The main module of this library. Example usage:
 *
 * ```typescript
 * import { CalendarModule, DateAdapter } from 'angular-calendar';
 * import { adapterFactory } from 'angular-calendar/date-adapters/date-fns';
 * import { SchedulerModule } from 'angular-calendar-scheduler';
 *
 * @NgModule({
 *  imports: [
 *     CalendarModule.forRoot({
 *       provide: DateAdapter,
 *       useFactory: adapterFactory
 *     }),
 *     SchedulerModule.forRoot({ locale: 'en', headerDateFormat: 'daysRange' })
 *   ]
 * })
 * class MyModule {}
 * ```
 *
 */
export class SchedulerModule {
    static forRoot(config) {
        return {
            ngModule: SchedulerModule,
            providers: [
                { provide: SCHEDULER_CONFIG, useValue: config },
                { provide: SchedulerConfig, useFactory: provideSchedulerConfig, deps: [SCHEDULER_CONFIG] }
            ]
        };
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.7", ngImport: i0, type: SchedulerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.7", ngImport: i0, type: SchedulerModule, declarations: [CalendarSchedulerViewComponent,
            CalendarSchedulerHourSegmentComponent,
            CalendarSchedulerHeaderComponent,
            CalendarSchedulerEventComponent,
            CalendarSchedulerEventTitleComponent,
            CalendarSchedulerEventContentComponent,
            CalendarSchedulerEventActionsComponent,
            SchedulerEventTitlePipe,
            CalendarSchedulerDatePipe], imports: [CommonModule, i1.CalendarModule], exports: [CalendarSchedulerDatePipe,
            CalendarSchedulerViewComponent,
            CalendarSchedulerHourSegmentComponent,
            CalendarSchedulerHeaderComponent,
            CalendarSchedulerEventComponent,
            CalendarSchedulerEventTitleComponent,
            CalendarSchedulerEventContentComponent,
            CalendarSchedulerEventActionsComponent] });
    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.7", ngImport: i0, type: SchedulerModule, providers: [
            CalendarSchedulerUtils,
            SchedulerEventTitlePipe,
            CalendarSchedulerDatePipe,
            SchedulerEventTitleFormatter,
            SchedulerDateFormatter
        ], imports: [CommonModule,
            CalendarModule.forRoot({
                provide: DateAdapter,
                useFactory: adapterFactory
            })] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.7", ngImport: i0, type: SchedulerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        CalendarModule.forRoot({
                            provide: DateAdapter,
                            useFactory: adapterFactory
                        })
                    ],
                    declarations: [
                        CalendarSchedulerViewComponent,
                        CalendarSchedulerHourSegmentComponent,
                        CalendarSchedulerHeaderComponent,
                        CalendarSchedulerEventComponent,
                        CalendarSchedulerEventTitleComponent,
                        CalendarSchedulerEventContentComponent,
                        CalendarSchedulerEventActionsComponent,
                        SchedulerEventTitlePipe,
                        CalendarSchedulerDatePipe
                    ],
                    providers: [
                        CalendarSchedulerUtils,
                        SchedulerEventTitlePipe,
                        CalendarSchedulerDatePipe,
                        SchedulerEventTitleFormatter,
                        SchedulerDateFormatter
                    ],
                    exports: [
                        CalendarSchedulerDatePipe,
                        CalendarSchedulerViewComponent,
                        CalendarSchedulerHourSegmentComponent,
                        CalendarSchedulerHeaderComponent,
                        CalendarSchedulerEventComponent,
                        CalendarSchedulerEventTitleComponent,
                        CalendarSchedulerEventContentComponent,
                        CalendarSchedulerEventActionsComponent
                    ]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NoZWR1bGVyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9tb2R1bGVzL3NjaGVkdWxlci9zY2hlZHVsZXIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBRXpFLE9BQU8sRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDL0QsT0FBTyxFQUFFLDhCQUE4QixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDckYsT0FBTyxFQUFFLHFDQUFxQyxFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDcEcsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDekYsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFDdkYsT0FBTyxFQUFFLG9DQUFvQyxFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDbEcsT0FBTyxFQUFFLHNDQUFzQyxFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDdEcsT0FBTyxFQUFFLHNDQUFzQyxFQUFFLE1BQU0sOENBQThDLENBQUM7QUFFdEcsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFFbkYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDN0UsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sc0NBQXNDLENBQUM7QUFFakYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFDeEYsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sdURBQXVELENBQUM7QUFtQnJHLE9BQU8sRUFBRSxlQUFl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cG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5cclxuaW1wb3J0IHsgYWRhcHRlckZhY3RvcnkgfSBmcm9tICdhbmd1bGFyLWNhbGVuZGFyL2RhdGUtYWRhcHRlcnMvZGF0ZS1mbnMnO1xyXG5cclxuaW1wb3J0IHsgQ2FsZW5kYXJNb2R1bGUsIERhdGVBZGFwdGVyIH0gZnJvbSAnYW5ndWxhci1jYWxlbmRhcic7XHJcbmltcG9ydCB7IENhbGVuZGFyU2NoZWR1bGVyVmlld0NvbXBvbmVudCB9IGZyb20gJy4vY2FsZW5kYXItc2NoZWR1bGVyLXZpZXcuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ2FsZW5kYXJTY2hlZHVsZXJIb3VyU2VnbWVudENvbXBvbmVudCB9IGZyb20gJy4vY2FsZW5kYXItc2NoZWR1bGVyLWhvdXItc2VnbWVudC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDYWxlbmRhclNjaGVkdWxlckhlYWRlckNvbXBvbmVudCB9IGZyb20gJy4vY2FsZW5kYXItc2NoZWR1bGVyLWhlYWRlci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDYWxlbmRhclNjaGVkdWxlckV2ZW50Q29tcG9uZW50IH0gZnJvbSAnLi9jYWxlbmRhci1zY2hlZHVsZXItZXZlbnQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ2FsZW5kYXJTY2hlZHVsZXJFdmVudFRpdGxlQ29tcG9uZW50IH0gZnJvbSAnLi9jYWxlbmRhci1zY2hlZHVsZXItZXZlbnQtdGl0bGUuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ2FsZW5kYXJTY2hlZHVsZXJFdmVudENvbnRlbnRDb21wb25lbnQgfSBmcm9tICcuL2NhbGVuZGFyLXNjaGVkdWxlci1ldmVudC1jb250ZW50LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENhbGVuZGFyU2NoZWR1bGVyRXZlbnRBY3Rpb25zQ29tcG9uZW50IH0gZnJvbSAnLi9jYWxlbmRhci1zY2hlZHVsZXItZXZlbnQtYWN0aW9ucy5jb21wb25lbnQnO1xyXG5cclxuaW1wb3J0IHsgQ2FsZW5kYXJTY2hlZHVsZXJVdGlscyB9IGZyb20gJy4vdXRpbHMvY2FsZW5kYXItc2NoZWR1bGVyLXV0aWxzLnByb3ZpZGVyJztcclxuXHJcbmltcG9ydCB7IFNjaGVkdWxlckV2ZW50VGl0bGVQaXBlIH0gZnJvbSAnLi9waXBlcy9zY2hlZHVsZXItZXZlbnQtdGl0bGUucGlwZSc7XHJcbmltcG9ydCB7IENhbGVuZGFyU2NoZWR1bGVyRGF0ZVBpcGUgfSBmcm9tICcuL3BpcGVzL2NhbGVuZGFyLXNjaGVkdWxlci1kYXRlLnBpcGUnO1xyXG5cclxuaW1wb3J0IHsgU2NoZWR1bGVyRGF0ZUZvcm1hdHRlciB9IGZyb20gJy4vZm9ybWF0dGVycy9zY2hlZHVsZXItZGF0ZS1mb3JtYXR0ZXIucHJvdmlkZXInO1xyXG5pbXBvcnQgeyBTY2hlZHVsZXJFdmVudFRpdGxlRm9ybWF0dGVyIH0gZnJvbSAnLi9mb3JtYXR0ZXJzL3NjaGVkdWxlci1ldmVudC10aXRsZS1mb3JtYXR0ZXIucHJvdmlkZXInO1xyXG5cclxuZXhwb3J0ICogZnJvbSAnLi9jYWxlbmRhci1zY2hlZHVsZXItdmlldy5jb21wb25lbnQnO1xyXG5leHBvcnQgKiBmcm9tICcuL2Zvcm1hdHRlcnMvc2NoZWR1bGVyLWRhdGUtZm9ybWF0dGVyLnByb3ZpZGVyJztcclxuZXhwb3J0ICogZnJvbSAnLi9mb3JtYXR0ZXJzL3NjaGVkdWxlci1ldmVudC10aXRsZS1mb3JtYXR0ZXIucHJvdmlkZXInO1xyXG5leHBvcnQgKiBmcm9tICcuL3BpcGVzL3NjaGVkdWxlci1ldmVudC10aXRsZS5waXBlJztcclxuZXhwb3J0ICogZnJvbSAnLi9waXBlcy9jYWxlbmRhci1zY2hlZHVsZXItZGF0ZS5waXBlJztcclxuZXhwb3J0ICogZnJvbSAnLi91dGlscy9jYWxlbmRhci1zY2hlZHVsZXItdXRpbHMnO1xyXG5leHBvcnQgKiBmcm9tICcuL3V0aWxzL2NhbGVuZGFyLXNjaGVkdWxlci11dGlscy5wcm92aWRlcic7XHJcbmV4cG9ydCAqIGZyb20gJy4uL2NvbW1vbi91dGlscyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vbW9kZWxzJztcclxuXHJcbmV4cG9ydCAqIGZyb20gJy4vY2FsZW5kYXItc2NoZWR1bGVyLWhvdXItc2VnbWVudC5jb21wb25lbnQnO1xyXG5leHBvcnQgKiBmcm9tICcuL2NhbGVuZGFyLXNjaGVkdWxlci1oZWFkZXIuY29tcG9uZW50JztcclxuZXhwb3J0ICogZnJvbSAnLi9jYWxlbmRhci1zY2hlZHVsZXItZXZlbnQuY29tcG9uZW50JztcclxuZXhwb3J0ICogZnJvbSAnLi9jYWxlbmRhci1zY2hlZHVsZXItZXZlbnQtdGl0bGUuY29tcG9uZW50JztcclxuZXhwb3J0ICogZnJvbSAnLi9jYWxlbmRhci1zY2hlZHVsZXItZXZlbnQtY29udGVudC5jb21wb25lbnQnO1xyXG5leHBvcnQgKiBmcm9tICcuL2NhbGVuZGFyLXNjaGVkdWxlci1ldmVudC1hY3Rpb25zLmNvbXBvbmVudCc7XHJcblxyXG5pbXBvcnQgeyBTY2hlZHVsZXJDb25maWcgfSBmcm9tICcuL3NjaGVkdWxlci1jb25maWcnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNDSEVEVUxFUl9DT05GSUcgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ1NjaGVkdWxlckNvbmZpZycpO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVTY2hlZHVsZXJDb25maWcoY29uZmlnOiBTY2hlZHVsZXJDb25maWcpIHtcclxuICAgIHJldHVybiBuZXcgU2NoZWR1bGVyQ29uZmlnKGNvbmZpZyk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGUgbWFpbiBtb2R1bGUgb2YgdGhpcyBsaWJyYXJ5LiBFeGFtcGxlIHVzYWdlOlxyXG4gKlxyXG4gKiBgYGB0eXBlc2NyaXB0XHJcbiAqIGltcG9ydCB7IENhbGVuZGFyTW9kdWxlLCBEYXRlQWRhcHRlciB9IGZyb20gJ2FuZ3VsYXItY2FsZW5kYXInO1xyXG4gKiBpbXBvcnQgeyBhZGFwdGVyRmFjdG9yeSB9IGZyb20gJ2FuZ3VsYXItY2FsZW5kYXIvZGF0ZS1hZGFwdGVycy9kYXRlLWZucyc7XHJcbiAqIGltcG9ydCB7IFNjaGVkdWxlck1vZHVsZSB9IGZyb20gJ2FuZ3VsYXItY2FsZW5kYXItc2NoZWR1bGVyJztcclxuICpcclxuICogQE5nTW9kdWxlKHtcclxuICogIGltcG9ydHM6IFtcclxuICogICAgIENhbGVuZGFyTW9kdWxlLmZvclJvb3Qoe1xyXG4gKiAgICAgICBwcm92aWRlOiBEYXRlQWRhcHRlcixcclxuICogICAgICAgdXNlRmFjdG9yeTogYWRhcHRlckZhY3RvcnlcclxuICogICAgIH0pLFxyXG4gKiAgICAgU2NoZWR1bGVyTW9kdWxlLmZvclJvb3QoeyBsb2NhbGU6ICdlbicsIGhlYWRlckRhdGVGb3JtYXQ6ICdkYXlzUmFuZ2UnIH0pXHJcbiAqICAgXVxyXG4gKiB9KVxyXG4gKiBjbGFzcyBNeU1vZHVsZSB7fVxyXG4gKiBgYGBcclxuICpcclxuICovXHJcbkBOZ01vZHVsZSh7XHJcbiAgaW1wb3J0czogW1xyXG4gICAgQ29tbW9uTW9kdWxlLFxyXG4gICAgQ2FsZW5kYXJNb2R1bGUuZm9yUm9vdCh7XHJcbiAgICAgIHByb3ZpZGU6IERhdGVBZGFwdGVyLFxyXG4gICAgICB1c2VGYWN0b3J5OiBhZGFwdGVyRmFjdG9yeVxyXG4gICAgfSlcclxuICBdLFxyXG4gIGRlY2xhcmF0aW9uczogW1xyXG4gICAgQ2FsZW5kYXJTY2hlZHVsZXJWaWV3Q29tcG9uZW50LFxyXG4gICAgQ2FsZW5kYXJTY2hlZHVsZXJIb3VyU2VnbWVudENvbXBvbmVudCxcclxuICAgIENhbGVuZGFyU2NoZWR1bGVySGVhZGVyQ29tcG9uZW50LFxyXG4gICAgQ2FsZW5kYXJTY2hlZHVsZXJFdmVudENvbXBvbmVudCxcclxuICAgIENhbGVuZGFyU2NoZWR1bGVyRXZlbnRUaXRsZUNvbXBvbmVudCxcclxuICAgIENhbGVuZGFyU2NoZWR1bGVyRXZlbnRDb250ZW50Q29tcG9uZW50LFxyXG4gICAgQ2FsZW5kYXJTY2hlZHVsZXJFdmVudEFjdGlvbnNDb21wb25lbnQsXHJcbiAgICBTY2hlZHVsZXJFdmVudFRpdGxlUGlwZSxcclxuICAgIENhbGVuZGFyU2NoZWR1bGVyRGF0ZVBpcGVcclxuICBdLFxyXG4gIHByb3ZpZGVyczogW1xyXG4gICAgQ2FsZW5kYXJTY2hlZHVsZXJVdGlscyxcclxuICAgIFNjaGVkdWxlckV2ZW50VGl0bGVQaXBlLFxyXG4gICAgQ2FsZW5kYXJTY2hlZHVsZXJEYXRlUGlwZSxcclxuICAgIFNjaGVkdWxlckV2ZW50VGl0bGVGb3JtYXR0ZXIsXHJcbiAgICBTY2hlZHVsZXJEYXRlRm9ybWF0dGVyXHJcbiAgXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICBDYWxlbmRhclNjaGVkdWxlckRhdGVQaXBlLFxyXG4gICAgQ2FsZW5kYXJTY2hlZHVsZXJWaWV3Q29tcG9uZW50LFxyXG4gICAgQ2FsZW5kYXJTY2hlZHVsZXJIb3VyU2VnbWVudENvbXBvbmVudCxcclxuICAgIENhbGVuZGFyU2NoZWR1bGVySGVhZGVyQ29tcG9uZW50LFxyXG4gICAgQ2FsZW5kYXJTY2hlZHVsZXJFdmVudENvbXBvbmVudCxcclxuICAgIENhbGVuZGFyU2NoZWR1bGVyRXZlbnRUaXRsZUNvbXBvbmVudCxcclxuICAgIENhbGVuZGFyU2NoZWR1bGVyRXZlbnRDb250ZW50Q29tcG9uZW50LFxyXG4gICAgQ2FsZW5kYXJTY2hlZHVsZXJFdmVudEFjdGlvbnNDb21wb25lbnRcclxuICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTY2hlZHVsZXJNb2R1bGUge1xyXG4gIHN0YXRpYyBmb3JSb290KGNvbmZpZz86IFNjaGVkdWxlckNvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnM8U2NoZWR1bGVyTW9kdWxlPiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIG5nTW9kdWxlOiBTY2hlZHVsZXJNb2R1bGUsXHJcbiAgICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgICAgIHsgcHJvdmlkZTogU0NIRURVTEVSX0NPTkZJRywgdXNlVmFsdWU6IGNvbmZpZyB9LFxyXG4gICAgICAgICAgICB7IHByb3ZpZGU6IFNjaGVkdWxlckNvbmZpZywgdXNlRmFjdG9yeTogcHJvdmlkZVNjaGVkdWxlckNvbmZpZywgZGVwczogW1NDSEVEVUxFUl9DT05GSUddIH1cclxuICAgICAgICBdXHJcbiAgICB9O1xyXG59XHJcbn1cclxuIl19