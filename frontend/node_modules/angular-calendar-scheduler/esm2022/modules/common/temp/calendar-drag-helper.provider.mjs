import { isWithinThreshold } from './util';
export class CalendarDragHelper {
    dragContainerElement;
    startPosition;
    constructor(dragContainerElement, draggableElement) {
        this.dragContainerElement = dragContainerElement;
        this.startPosition = draggableElement.getBoundingClientRect();
    }
    validateDrag({ x, y, snapDraggedEvents, dragAlreadyMoved, transform, }) {
        const isDraggedWithinThreshold = isWithinThreshold({ x, y }) || dragAlreadyMoved;
        if (snapDraggedEvents) {
            const inner = Object.assign({}, this.startPosition, {
                left: this.startPosition.left + transform.x,
                right: this.startPosition.right + transform.x,
                top: this.startPosition.top + transform.y,
                bottom: this.startPosition.bottom + transform.y,
            });
            if (isDraggedWithinThreshold) {
                const outer = this.dragContainerElement.getBoundingClientRect();
                const isTopInside = outer.top < inner.top && inner.top < outer.bottom;
                const isBottomInside = outer.top < inner.bottom && inner.bottom < outer.bottom;
                return (
                /*isInsideLeftAndRight(outer, inner) &&*/ (isTopInside || isBottomInside));
            }
            /* istanbul ignore next */
            return false;
        }
        else {
            return isDraggedWithinThreshold;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItZHJhZy1oZWxwZXIucHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9saWIvbW9kdWxlcy9jb21tb24vdGVtcC9jYWxlbmRhci1kcmFnLWhlbHBlci5wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQXdCLGlCQUFpQixFQUFFLE1BQU0sUUFBUSxDQUFDO0FBR2pFLE1BQU0sT0FBTyxrQkFBa0I7SUFJbkI7SUFITyxhQUFhLENBQWE7SUFFM0MsWUFDVSxvQkFBaUMsRUFDekMsZ0JBQTZCO1FBRHJCLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBYTtRQUd6QyxJQUFJLENBQUMsYUFBYSxHQUFHLGdCQUFnQixDQUFDLHFCQUFxQixFQUFFLENBQUM7SUFDaEUsQ0FBQztJQUVELFlBQVksQ0FBQyxFQUNYLENBQUMsRUFDRCxDQUFDLEVBQ0QsaUJBQWlCLEVBQ2pCLGdCQUFnQixFQUNoQixTQUFTLEdBT1Y7UUFDQyxNQUFNLHdCQUF3QixHQUM1QixpQkFBaUIsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLGdCQUFnQixDQUFDO1FBRWxELElBQUksaUJBQWlCLEVBQUU7WUFDckIsTUFBTSxLQUFLLEdBQWUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRTtnQkFDOUQsSUFBSSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxHQUFHLFNBQVMsQ0FBQyxDQUFDO2dCQUMzQyxLQUFLLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLENBQUM7Z0JBQzdDLEdBQUcsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsR0FBRyxTQUFTLENBQUMsQ0FBQztnQkFDekMsTUFBTSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQyxDQUFDO2FBQ2hELENBQUMsQ0FBQztZQUVILElBQUksd0JBQXdCLEVBQUU7Z0JBQzVCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO2dCQUVoRSxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsR0FBRyxHQUFHLEtBQUssQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO2dCQUV0RSxNQUFNLGNBQWMsR0FDbEIsS0FBSyxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztnQkFFMUQsT0FBTztnQkFDTCx5Q0FBeUMsQ0FBQyxDQUFDLFdBQVcsSUFBSSxjQUFjLENBQUMsQ0FDMUUsQ0FBQzthQUNIO1lBRUQsMEJBQTBCO1lBQzFCLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7YUFBTTtZQUNMLE9BQU8sd0JBQXdCLENBQUM7U0FDakM7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaW1wb3J0IHsgaXNJbnNpZGVMZWZ0QW5kUmlnaHQsIGlzV2l0aGluVGhyZXNob2xkIH0gZnJvbSAnLi91dGlsJztcclxuaW1wb3J0IHsgVmFsaWRhdGVEcmFnUGFyYW1zIH0gZnJvbSAnYW5ndWxhci1kcmFnZ2FibGUtZHJvcHBhYmxlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBDYWxlbmRhckRyYWdIZWxwZXIge1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgc3RhcnRQb3NpdGlvbjogQ2xpZW50UmVjdDtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGRyYWdDb250YWluZXJFbGVtZW50OiBIVE1MRWxlbWVudCxcclxuICAgIGRyYWdnYWJsZUVsZW1lbnQ6IEhUTUxFbGVtZW50XHJcbiAgKSB7XHJcbiAgICB0aGlzLnN0YXJ0UG9zaXRpb24gPSBkcmFnZ2FibGVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gIH1cclxuXHJcbiAgdmFsaWRhdGVEcmFnKHtcclxuICAgIHgsXHJcbiAgICB5LFxyXG4gICAgc25hcERyYWdnZWRFdmVudHMsXHJcbiAgICBkcmFnQWxyZWFkeU1vdmVkLFxyXG4gICAgdHJhbnNmb3JtLFxyXG4gIH06IHtcclxuICAgIHg6IG51bWJlcjtcclxuICAgIHk6IG51bWJlcjtcclxuICAgIHNuYXBEcmFnZ2VkRXZlbnRzOiBib29sZWFuO1xyXG4gICAgZHJhZ0FscmVhZHlNb3ZlZDogYm9vbGVhbjtcclxuICAgIHRyYW5zZm9ybTogVmFsaWRhdGVEcmFnUGFyYW1zWyd0cmFuc2Zvcm0nXTtcclxuICB9KTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBpc0RyYWdnZWRXaXRoaW5UaHJlc2hvbGQgPVxyXG4gICAgICBpc1dpdGhpblRocmVzaG9sZCh7IHgsIHkgfSkgfHwgZHJhZ0FscmVhZHlNb3ZlZDtcclxuXHJcbiAgICBpZiAoc25hcERyYWdnZWRFdmVudHMpIHtcclxuICAgICAgY29uc3QgaW5uZXI6IENsaWVudFJlY3QgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnN0YXJ0UG9zaXRpb24sIHtcclxuICAgICAgICBsZWZ0OiB0aGlzLnN0YXJ0UG9zaXRpb24ubGVmdCArIHRyYW5zZm9ybS54LFxyXG4gICAgICAgIHJpZ2h0OiB0aGlzLnN0YXJ0UG9zaXRpb24ucmlnaHQgKyB0cmFuc2Zvcm0ueCxcclxuICAgICAgICB0b3A6IHRoaXMuc3RhcnRQb3NpdGlvbi50b3AgKyB0cmFuc2Zvcm0ueSxcclxuICAgICAgICBib3R0b206IHRoaXMuc3RhcnRQb3NpdGlvbi5ib3R0b20gKyB0cmFuc2Zvcm0ueSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgICBpZiAoaXNEcmFnZ2VkV2l0aGluVGhyZXNob2xkKSB7XHJcbiAgICAgICAgY29uc3Qgb3V0ZXIgPSB0aGlzLmRyYWdDb250YWluZXJFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgICAgICBjb25zdCBpc1RvcEluc2lkZSA9IG91dGVyLnRvcCA8IGlubmVyLnRvcCAmJiBpbm5lci50b3AgPCBvdXRlci5ib3R0b207XHJcblxyXG4gICAgICAgIGNvbnN0IGlzQm90dG9tSW5zaWRlID1cclxuICAgICAgICAgIG91dGVyLnRvcCA8IGlubmVyLmJvdHRvbSAmJiBpbm5lci5ib3R0b20gPCBvdXRlci5ib3R0b207XHJcblxyXG4gICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAvKmlzSW5zaWRlTGVmdEFuZFJpZ2h0KG91dGVyLCBpbm5lcikgJiYqLyAoaXNUb3BJbnNpZGUgfHwgaXNCb3R0b21JbnNpZGUpXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIGlzRHJhZ2dlZFdpdGhpblRocmVzaG9sZDtcclxuICAgIH1cclxuICB9XHJcbn0iXX0=